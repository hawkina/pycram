<launch>
  <arg name="namespace" default="hsrb" />
  <arg name="personal_name" default="" />
  <arg name="sim" default="false" />
  <arg name="use_head_rgbd_sensor" default="true" />
  <arg name="use_rear_scan" default="false" />

  <remap from="$(arg namespace)/camera/depth_registered/points" to="$(arg namespace)/head_rgbd_sensor/depth_registered/rectified_pointsbase_b_bumper_link"/>
  <!-- ##### Navigation settings ##### -->
  <!-- map file setting (can be overriden) -->
  <arg name="map" default="/home/hsr-user/robocup_ws/src/hsrb_common_launch/launch/include/map/map.yaml" />

  <arg unless="$(eval personal_name == '')" name="robot_tf_name" value="$(arg personal_name)/base_footprint"/>
  <arg     if="$(eval personal_name == '')" name="robot_tf_name" value="base_footprint"/>

  <arg unless="$(eval personal_name == '')" name="odom_tf_name" value="$(arg personal_name)/odom"/>
  <arg     if="$(eval personal_name == '')" name="odom_tf_name" value="odom"/>

  <arg name="path_planner_name" default="base_path_planner" />
  <arg name="path_follower_name" default="omni_path_follower" />
  <arg name="navigation_log_recorder_name" default="navigation_log_recorder" />
  <arg name="navigation_log_record_service_name" default="record" />

  <!-- tf name parameter -->
  <group ns="/$(arg personal_name)">
    <param name="robot_tf_name" value="$(arg robot_tf_name)"/>
    <param name="odom_tf_name" value="$(arg odom_tf_name)"/>
    <param name="localization_score_limit" value="-0.27"/>
    <node pkg="hsr_navigation" name="global_pose_publisher" type="global_pose_publisher.py" output="screen"/>

    <!-- base_local_planner -->
    <node name="$(arg path_planner_name)" pkg="tmc_base_path_planner" type="base_path_planner">
      <rosparam command="load" file="$(find tmc_base_path_planner)/config/base_path_planner.yaml" />
    </node>

    <!-- omni_path_follower -->
    <node name="$(arg path_follower_name)" pkg="tmc_omni_path_follower" type="omni_path_follower">
      <rosparam command="load" file="$(find tmc_omni_path_follower)/config/omni_path_follower_config.yaml" />
      <param name="base_max_linear_velocity" value="0.8" />
      <param name="base_max_angular_velocity" value="0.5"/>
      <param name="base_max_linear_acceleration" value="0.3" />
      <param name="base_max_angular_acceleration" value="0.5" />
      <param name="base_linear_deceleration_near_goal" value="0.4"/>
      <param name="base_linear_velocity_margin" value="0.02"/>
      <param name="interpolation_number" value="10"/>
      <param name="linear_p_gain" value="1.0" />
      <param name="angular_p_gain" value="1.0" />
      <param name="path_length_threshold" value="1.0"/>
      <param name="goal_area_length" value="0.5"/>
      <param name="goal_line_length" value="0.05"/>
      <param name="goal_stop_error_length" value="0.02"/>
      <param name="goal_stop_error_angle" value="0.02"/>
    </node>

    <!-- commented out since it collides with amcl-->
    <!-- pose_integrator
    <node name="pose_integrator"      pkg="tmc_pose_integrator" type="pose_integrator">
      <rosparam command="load" file="$(find tmc_pose_integrator)/config/pose_integrator.yaml" />
      <param name="cycle_time" value="0.01"/>
      <param name="convergence_time" value="1.0"/>
      <param name="odom_tf_name" value="$(arg odom_tf_name)"/>
      <param name="base_tf_name" value="$(arg robot_tf_name)"/>
      <remap from="odometry" to="$(arg namespace)/odom" />
    </node> -->

    <!-- base_rviz_wrapper -->
    <node name="base_rviz_wrapper"      pkg="tmc_base_visualizer" type="base_rviz_wrapper">
      <remap from="odometry" to="odom" />
    </node>

    <!-- grid_map_server -->
    <node name="grid_map_server" pkg="tmc_grid_map_server" type="grid_map_server" args="$(arg map)" />

    <!-- map_merger -->
    <!-- nodelet only for robot -->
    <arg name="manager_namespace" default="$(arg namespace)/head_rgbd_sensor" />
    <arg name="map_merger_config"
         value="$(eval optenv('MAP_MERGER_CONFIG', find('hsrb_common_launch') + '/config/tmc_map_merger_sample.yaml'))" />
    <node pkg="nodelet" name="tmc_map_merger" type="nodelet"
          args="load tmc_map_merger/MapMergerNodelet $(arg manager_namespace)/head_rgbd_sensor_nodelet_manager"
          respawn="true"
          if="$(eval sim == false and use_head_rgbd_sensor == true)">
      <remap from="$(arg manager_namespace)/merged_map" to="dynamic_obstacle_map" />
      <remap from="$(arg manager_namespace)/hsrb/head_rgbd_sensor/depth_registered/rectified_points"
             to="hsrb/head_rgbd_sensor/depth_registered/rectified_points" />
      <remap from="$(arg manager_namespace)/hsrb/base_scan" to="hsrb/base_scan" />
      <remap from="$(arg manager_namespace)/hsrb/base_rear_scan" to="hsrb/base_rear_scan" if="$(arg use_rear_scan)"/>
      <rosparam command="load" file="$(arg map_merger_config)" />
      <rosparam command="load" file="$(find hsrb_common_launch)/config/map_merger_two_scan.yaml" if="$(arg use_rear_scan)"/>
    </node>
    <!-- node for simulation and for not use head_rgbd_sensor robot -->
    <node name="tmc_map_merger" pkg="tmc_map_merger" type="map_merger_node" if="$(eval sim == true or use_head_rgbd_sensor == false)">
      <remap from="merged_map" to="dynamic_obstacle_map" />
      <rosparam command="load" file="$(arg map_merger_config)" />
      <rosparam command="load" file="$(find hsrb_common_launch)/config/map_merger_two_scan.yaml" if="$(arg use_rear_scan)"/>
      <param name="origin_frame" value="$(arg robot_tf_name)"/>
    </node>

    <!-- laser_2d_localizer -->
    <node name="laser_2d_localizer" pkg="tmc_laser_2d_localizer" type="laser_2d_localizer">
      <rosparam file="$(find tmc_laser_2d_localizer)/config/laser_2d_localizer.yaml" command="load"/>
      <remap from="input_cloud" to="urg_cloud" />
      <!-- initial pose -->
      <param name="init_x" value="0.0"/>
      <param name="init_y" value="0.0"/>
      <param name="init_theta_deg" value="0.0"/>
      <remap from="odometry" to="$(arg namespace)/odom"/>
      <!-- motion noise -->
      <param name="standard_deviation_xy_to_yx" value="0.1"/>
      <param name="standard_deviation_xy_to_xy" value="0.05"/>
      <param name="standard_deviation_xy_to_theta" value="0.1"/>
      <param name="standard_deviation_theta_to_xy" value="0.1"/>
      <param name="standard_deviation_theta_to_theta" value="0.05"/>
      <param name="odometry_tf_name" value="$(arg robot_tf_name)"/>
      <param name="map_tf_name" value="$(arg odom_tf_name)"/>
      </node>


    <!-- move base -->
    <node pkg="tmc_move_base" type="move_base_node" name="move_base">
      <param name="planning_timeout" value="20.0"/>
      <param name="base_frame" value="$(arg robot_tf_name)" />
      <param name="navigation_log_record_service_name"
             value="$(arg navigation_log_recorder_name)/$(arg navigation_log_record_service_name)" />
      <rosparam param="record_parameter_node_names" subst_value="True">
        - $(arg path_planner_name)
        - $(arg path_follower_name)
      </rosparam>
      <remap from="move_base_simple/goal" to="goal"/>
    </node>

    <!-- action_move_base -->
    <include file="$(find tmc_action_move_base)/launch/action_move_base_default.launch" />

    <!-- scan to cloud
    <node pkg="scan_to_cloud_converter" name="scan_to_cloud_converter" type="scan_to_cloud_converter_node">
      <remap from="scan" to="$(arg namespace)/base_scan" />
      <remap from="cloud" to="urg_cloud" />
    </node>

    <group if="$(arg use_rear_scan)">
      <node pkg="scan_to_cloud_converter" name="scan_to_cloud_converter_rear" type="scan_to_cloud_converter_node">
        <remap from="scan" to="$(arg namespace)/base_rear_scan" />
        <remap from="cloud" to="rear_urg_cloud" />
      </node> -->

      <!-- point_cloud_merger
      <node pkg="nodelet" type="nodelet" name="point_cloud_merger" args="standalone tmc_point_cloud_merger/nodelet">
        <rosparam>
          inputs:
            - topic_name: 'urg_cloud'
              stall_monitor_hz: 20.0
              stall_timeout_sec: 1.0
            - topic_name: 'rear_urg_cloud'
              stall_monitor_hz: 20.0
              stall_timeout_sec: 1.0
          trigger:
            - topic_name: 'urg_cloud'
          output:
            topic_name: urg_merged_cloud
            frame_id: base_link
        </rosparam>
      </node>
  </group> -->

    <!--  視点制御（頭部Pan回転）を起動
    <node pkg="tmc_viewpoint_controller" name="viewpoint_controller" type="viewpoint_controller">
      <param name="joint_states" value="joint_states" type="string" />
      <param name="command" value="$(arg namespace)/head_trajectory_controller/command" type="string" />
      <param name="map_frame" value="map" />
      <param name="base_frame" value="$(arg personal_name)/base_footprint" />
      <param name="focus_path_length" value="0.7" />
      <param name="max_rotation_once" value="3.14" />
      <param name="rate" value="10" />
      <param name="fixed_neck_tilt_angle" value="-0.5" />
      <remap from="joint_states" to="$(arg namespace)/joint_states"/>
    </node>-->

    <!-- safety_velocity_limiter -->
    <node pkg="tmc_safety_velocity_limiter" name="safety_velocity_limiter" type="safety_velocity_limiter">
      <param name="enable_function" value="false" type="bool" />
      <rosparam command="load" file="$(find tmc_safety_velocity_limiter)/config/virtual_bumper.yaml" />
      <remap from="obstacle_cloud" to="urg_cloud" unless="$(arg use_rear_scan)"/>
      <remap from="obstacle_cloud" to="urg_merged_cloud" if="$(arg use_rear_scan)"/>
      <remap from="input_velocity" to="base_velocity" />
      <remap from="output_velocity" to="$(arg namespace)/command_velocity_autonomy" />
    </node>

    <!-- velocity_switcher -->
    <node pkg="tmc_velocity_switcher" name="velocity_switcher" type="velocity_switcher">
      <rosparam command="load" file="$(find tmc_velocity_switcher)/config/input_velocities.yaml" />
      <remap from="velocity_1" to="$(arg namespace)/command_velocity_teleop" />
      <remap from="velocity_2" to="$(arg namespace)/command_velocity_autonomy" />
      <remap from="output_velocity" to="$(arg namespace)/command_velocity" />
    </node>

    <!-- マーカー自己位置推定ノード
    <node name="marker_based_localizer" pkg="tmc_marker_based_localizer" type="marker_based_localizer">
      <param name="travel_distance_threshold" value="0.0"/>
      <param name="marker_to_base_distance_threshold" value="1.8"/>
      <remap from="localized_pose" to="laser_2d_correct_pose"/>
      <remap from="odometry" to="$(arg namespace)/odom"/>
      <remap from="marker/object_info" to="recognized_object"/>
      <remap from="odom" to="$(arg namespace)/odom"/>
      <remap from="joint_states" to="$(arg namespace)/joint_states"/>
      <rosparam param="joints_list" >
        - base_l_drive_wheel_joint
        - base_r_drive_wheel_joint
        - base_roll_joint
        - head_pan_joint
        - head_tilt_joint
        - arm_lift_joint
      </rosparam>
      <param name="joint_stopping_vel" value="0.005"/>
    </node>-->

    <!-- navigation log recorder -->
    <node name="$(arg navigation_log_recorder_name)" pkg="tmc_rosbag_tools" type="topic_collection_node.py">
      <rosparam command="load" file="$(find hsrb_common_launch)/config/navigation_log_recorder.yaml" />
      <param name="output_dir" value="$(optenv ROS_LOG_DIR log)/latest/" />
      <param name="service_trigger/service_name" value="~$(arg navigation_log_record_service_name)" />
    </node>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)" />

  </group>
</launch>
